// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashperconaxtradbs.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashperconaxtradbsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\x1b\x45\x10\x7f\xf7\xa7\x18\x09\xa4\x02\xe2\x6c\x42\x24\x04\xf7\x82\x4a\x0a\x52\x45\x81\x2a\x29\x15\x52\x54\xa4\xf1\xee\xf8\xbc\x64\x6f\x77\x99\x99\x33\x49\x3e\x3d\xda\xbd\x3b\xc7\x71\xee\x42\x1b\xd4\x7d\xf2\xce\xff\xf9\xfd\x66\xd6\x87\xc9\xbd\x25\x16\x17\x43\x0d\x98\x1c\x5d\x2b\x85\x7c\x93\xe5\xd5\xb7\xb2\x74\x71\xb5\x3b\x59\x93\xe2\xc9\xe2\xca\x05\x5b\xc3\x59\x27\x1a\xdb\x73\x92\xd8\xb1\xa1\x17\xb4\x71\xc1\xa9\x8b\x61\xd1\x92\xa2\x45\xc5\x7a\x01\x60\x98\x30\x0b\xdf\xb8\x96\x44\xb1\x4d\x35\x84\xce\xfb\x05\x80\xc7\x35\x79\xc9\x36\x00\x98\x52\x0d\xa2\x28\xdb\x05\x40\xc0\x96\x86\x5b\x22\x36\x31\xe0\xb5\x32\xda\xb5\x2c\x5d\x10\x45\xef\x89\x97\x45\xbb\xc4\x94\xc4\x44\x4b\x4b\x13\xdb\x85\x24\x32\x39\x5a\xc3\xb1\x4b\x35\x3c\x6a\xdb\x27\x19\x92\x1b\x54\x6a\x22\xbb\xf1\x5e\xed\x2b\xc9\xbf\x47\xbf\x72\xed\x1b\xbf\xc8\xea\xd7\x7d\x69\x7f\x28\xe3\x8b\x1f\x8a\xd2\x3b\xd1\x9f\x67\x0c\x5e\x39\xd1\x62\x94\x7c\xc7\xe8\x27\xdb\x2b\x7a\x71\xa1\xe9\x3c\xf2\x94\xc5\x02\x20\x31\x09\xf1\x8e\x7e\x0f\x57\x21\xfe\x13\x7e\x72\xe4\xad\xd4\xb0\x41\x2f\xb9\x42\x31\x31\x51\x0d\xbf\xe6\xe6\x12\x1a\xb2\x0b\x80\x1d\x7a\x67\x0b\x07\x7d\x7b\x31\x51\x78\xfe\xfa\xe5\xdb\xd3\x0b\xb3\xa5\x16\x7b\x61\x8e\x1c\x13\xb1\xee\x51\xe8\x69\xd9\x0f\xc4\x5e\x06\x60\x49\x0c\xbb\x54\x22\xc2\xb3\x1c\xaa\xb7\x01\x9b\x47\x80\x04\x74\x4b\xb0\xeb\x65\x64\x41\x4a\x1a\x88\x1b\xd0\xad\x13\x60\x2a\x3d\x04\x2d\x25\x1d\x84\x85\x6c\x82\x01\xe2\xfa\x2f\x32\xba\x84\x8b\xdc\x27\x0b\xc8\x36\x76\xde\x82\x89\x61\x47\xac\xc0\x64\x62\x13\xdc\xed\x3e\xb2\x80\xc6\x92\xd2\xa3\xd2\x80\xf2\x78\x5c\x50\xe2\x80\x3e\x83\xd0\xd1\x97\x80\xc1\x42\x8b\x37\xc0\x94\x73\x40\x17\x0e\xa2\x15\x13\x59\xc2\x2f\x91\x09\x5c\xd8\xc4\x1a\xb6\xaa\x49\xea\xd5\xaa\x71\x3a\xae\x80\x89\x6d\xdb\x05\xa7\x37\x2b\x13\x83\xb2\x5b\x77\x1a\x59\x56\x96\x76\xe4\x57\xe2\x9a\x0a\xd9\x6c\x9d\x92\xd1\x8e\x69\x85\xc9\x55\xa5\xf0\xa0\x65\x8f\x5a\xfb\x09\x0f\xfb\x22\xcf\x0e\x2a\xd5\x9b\x54\x46\x9e\x5d\x68\xf6\xe2\x32\x6c\xb3\xb8\xe7\x49\x03\x27\x80\x83\x5b\x5f\xff\x1d\xbc\x59\x94\x51\x39\xff\xf1\xe2\x0d\x8c\x49\x0b\x05\xf7\x31\x2f\x68\xdf\xb9\xc9\x1d\xf0\x19\x28\x17\x36\xc4\x3d\x71\x1b\x8e\x6d\x89\x48\xc1\xa6\xe8\x82\x96\x8b\xf1\x8e\xc2\x7d\xd0\xa5\x5b\xb7\x4e\x33\xd3\x7f\x77\x24\x9a\xf9\x59\xc2\x19\x86\x10\x15\xd6\x04\x5d\xb2\xa8\x64\x97\xf0\x32\xc0\x19\xb6\xe4\xcf\x50\xe8\xa3\xc3\x9e\x11\x96\x2a\x43\xfa\xdf\xc0\x1f\xbe\x5f\xe3\x99\x5a\x8f\x7c\xca\x63\x75\x4f\x02\xd0\xe2\xf5\x2b\x0a\x8d\x6e\x6b\xf8\xe6\xf4\x48\x97\x50\xf3\x48\xd6\xf0\xe7\x25\x56\xb7\xef\x3e\xbb\xac\xb0\xba\xfd\xaa\xfa\xee\xdd\x17\x97\xc3\x8f\xcf\xbf\xff\xf4\xc8\x67\xb2\xc8\x51\xdc\x13\xb8\x17\x8f\xaf\xe0\xe4\xd0\x3c\x7c\x97\x2e\x12\x99\x3c\x45\x99\xca\x61\x51\x37\x91\x7b\x43\x18\x2c\xe1\xe0\x8d\x1b\x4f\xbf\x2c\xb0\x71\x9e\xde\x03\xa4\x35\x9a\xab\x2e\x1d\xc3\x34\x67\x9d\x0f\x72\x33\x21\x9d\x85\x62\xe8\x3d\x1a\xd4\x73\x52\xbe\x99\x72\xdd\x44\x6e\x51\xf3\x1f\x83\x9e\x7e\x3d\x1b\x3a\xbf\x18\x0d\xf1\x24\x03\x47\x50\x97\xa0\x9d\xf7\x79\x04\x7e\xdb\x11\xb3\xb3\x0f\x46\x61\xb6\x5e\xd7\x62\xf3\xc0\xfa\x31\x44\x98\x1a\x27\x33\xad\x3d\x8a\x0a\x53\x8a\xe2\x34\x3e\xc1\x55\xb1\xf9\x40\x9f\xbc\xf3\x8e\xc9\x1e\xbb\x55\xfb\xfa\x27\x14\x63\x7d\x0f\x54\x8a\xc7\xf1\x67\x89\x78\x12\x09\x4c\xc9\x3b\x83\x67\xb1\x0b\x7a\xec\xf4\xd8\xb8\xcc\x8f\x0a\x93\x68\xe4\x0f\x22\xf6\x49\xa3\xae\xc8\x0d\xe9\xf3\x94\xce\xfb\x16\x26\x23\xfc\x9f\x89\x9f\x27\xf2\x41\xea\xf7\xa3\x68\x2a\x60\x35\xbc\x0c\xf7\x44\x65\x33\xee\x49\x0e\x69\x3a\x52\x14\xb4\x1f\x7f\x13\x8f\x44\xbb\xf1\x0b\x77\x77\x82\x3e\x6d\xf1\xe4\x4e\x56\x40\xac\x86\xef\xcf\x03\x35\x40\xf9\xe6\xb2\x35\x28\x77\x7d\xb6\x9c\x37\x2f\x70\x2f\xf9\x37\x00\x00\xff\xff\x6f\x0b\x96\x1d\x39\x0b\x00\x00")

func installerStashAppscodeCom_stashperconaxtradbsYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashperconaxtradbsYaml,
		"installer.stash.appscode.com_stashperconaxtradbs.yaml",
	)
}

func installerStashAppscodeCom_stashperconaxtradbsYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashperconaxtradbsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashperconaxtradbs.yaml", size: 2873, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashperconaxtradbs.yaml": installerStashAppscodeCom_stashperconaxtradbsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashperconaxtradbs.yaml": &bintree{installerStashAppscodeCom_stashperconaxtradbsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
