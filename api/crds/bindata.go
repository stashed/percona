// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashperconaxtradbs.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashperconaxtradbsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5f\x6f\x23\x45\x0c\x7f\xcf\xa7\xb0\x04\xd2\x01\x62\x13\x4a\x25\x04\xfb\x82\x8e\x1e\x48\x27\x0e\x38\xb5\xc7\x09\xa9\x3a\x24\x67\xc6\xd9\x0c\x9d\x9d\x19\x6c\x6f\x68\xfb\xe9\xd1\xcc\xee\xa6\x69\xb2\x09\x77\x95\xb8\x79\xca\xd8\x1e\xff\xf9\xfd\x6c\x67\x31\xb9\xb7\xc4\xe2\x62\xa8\x01\x93\xa3\x5b\xa5\x90\x6f\x32\xbf\xf9\x56\xe6\x2e\x2e\x36\x67\x4b\x52\x3c\x9b\xdd\xb8\x60\x6b\xb8\xe8\x44\x63\x7b\x49\x12\x3b\x36\xf4\x82\x56\x2e\x38\x75\x31\xcc\x5a\x52\xb4\xa8\x58\xcf\x00\x0c\x13\x66\xe1\x1b\xd7\x92\x28\xb6\xa9\x86\xd0\x79\x3f\x03\xf0\xb8\x24\x2f\xd9\x06\x00\x53\xaa\x41\x14\x65\x3d\x03\x08\xd8\xd2\x70\x4b\xc4\x26\x06\xbc\x55\x46\xbb\x94\xb9\x0b\xa2\xe8\x3d\xf1\xbc\x68\xe7\x98\x92\x98\x68\x69\x6e\x62\x3b\x93\x44\x26\x7b\x6b\x38\x76\xa9\x86\x93\xb6\x7d\x90\x21\xb8\x41\xa5\x26\xb2\x1b\xef\xd5\x36\x93\xfc\x7b\x7c\x57\xae\x7d\xe1\x57\x59\xfd\xba\x4f\xed\x0f\x65\x7c\xf1\x43\x51\x7a\x27\xfa\xf3\x11\x83\x57\x4e\xb4\x18\x25\xdf\x31\xfa\xc9\xf2\x8a\x5e\x5c\x68\x3a\x8f\x3c\x65\x31\x03\x48\x4c\x42\xbc\xa1\xdf\xc3\x4d\x88\xff\x84\x9f\x1c\x79\x2b\x35\xac\xd0\x4b\xce\x50\x4c\x4c\x54\xc3\xaf\xb9\xb8\x84\x86\xec\x0c\x60\x83\xde\xd9\xc2\x41\x5f\x5e\x4c\x14\x9e\xbf\x7e\xf9\xf6\xfc\xca\xac\xa9\xc5\x5e\x98\x3d\xc7\x44\xac\x5b\x14\x7a\x5a\xb6\x0d\xb1\x95\x01\x58\x12\xc3\x2e\x15\x8f\xf0\x2c\xbb\xea\x6d\xc0\xe6\x16\x20\x01\x5d\x13\x6c\x7a\x19\x59\x90\x12\x06\xe2\x0a\x74\xed\x04\x98\x4a\x0d\x41\x4b\x4a\x3b\x6e\x21\x9b\x60\x80\xb8\xfc\x8b\x8c\xce\xe1\x2a\xd7\xc9\x02\xb2\x8e\x9d\xb7\x60\x62\xd8\x10\x2b\x30\x99\xd8\x04\x77\xbf\xf5\x2c\xa0\xb1\x84\xf4\xa8\x34\xa0\x3c\x1e\x17\x94\x38\xa0\xcf\x20\x74\xf4\x25\x60\xb0\xd0\xe2\x1d\x30\xe5\x18\xd0\x85\x1d\x6f\xc5\x44\xe6\xf0\x4b\x64\x02\x17\x56\xb1\x86\xb5\x6a\x92\x7a\xb1\x68\x9c\x8e\x23\x60\x62\xdb\x76\xc1\xe9\xdd\xc2\xc4\xa0\xec\x96\x9d\x46\x96\x85\xa5\x0d\xf9\x85\xb8\xa6\x42\x36\x6b\xa7\x64\xb4\x63\x5a\x60\x72\x55\x49\x3c\x68\x99\xa3\xd6\x7e\xc2\xc3\xbc\xc8\xb3\x9d\x4c\xf5\x2e\x95\x96\x67\x17\x9a\xad\xb8\x34\xdb\x51\xdc\x73\xa7\x81\x13\xc0\xe1\x59\x9f\xff\x03\xbc\x59\x94\x51\xb9\xfc\xf1\xea\x0d\x8c\x41\x0b\x05\x8f\x31\x2f\x68\x3f\x3c\x93\x07\xe0\x33\x50\x2e\xac\x88\x7b\xe2\x56\x1c\xdb\xe2\x91\x82\x4d\xd1\x05\x2d\x17\xe3\x1d\x85\xc7\xa0\x4b\xb7\x6c\x9d\x66\xa6\xff\xee\x48\x34\xf3\x33\x87\x0b\x0c\x21\x2a\x2c\x09\xba\x64\x51\xc9\xce\xe1\x65\x80\x0b\x6c\xc9\x5f\xa0\xd0\xff\x0e\x7b\x46\x58\xaa\x0c\xe9\x7f\x03\xbf\xbb\xbf\xc6\x33\x35\x1e\xf9\x94\x65\xf5\x48\x02\xd0\xe2\xed\x2b\x0a\x8d\xae\x6b\xf8\xe6\x7c\x4f\x97\x50\x73\x4b\xd6\xf0\xe7\x35\x56\xf7\xef\x3e\xbb\xae\xb0\xba\xff\xaa\xfa\xee\xdd\x17\xd7\xc3\x8f\xcf\xbf\xff\x74\xef\xcd\x64\x92\xa3\xb8\x27\x70\x2b\x1e\xb7\xe0\x64\xd3\x1c\xee\xa5\xab\x44\x26\x77\x51\xa6\x72\x18\xd4\x55\xe4\xde\x10\x06\x4b\xd8\xd9\x71\xe3\xe9\x87\x05\x56\xce\xd3\x7b\x80\xb4\x44\x73\xd3\xa5\x7d\x98\x8e\x59\xe7\x83\xdc\x4c\x48\x8f\x42\x31\xd4\x1e\x0d\xea\x25\x29\xdf\x4d\x3d\x5d\x45\x6e\x51\xf3\x1f\x83\x9e\x7f\x7d\xd4\x75\xde\x18\x0d\xf1\x9e\x3e\xb7\xb2\x63\xb2\xfb\x7e\xab\x92\xe8\x81\xf0\x21\x91\x49\x26\xf7\x28\x2b\xc9\x75\xde\xe7\x56\xfa\x6d\x43\xcc\xce\x1e\xb4\xd4\xd1\xba\x5d\x8b\xcd\x81\xf5\x29\x64\x99\x1a\x27\x47\x20\x3a\x89\x2e\x53\x8a\xe2\x34\x3e\xe1\xa9\x62\xf3\x81\x6f\x8e\x03\x3e\xe6\x3f\xa1\x18\xf3\x3b\x50\x29\xee\xfb\x3f\x4a\xc4\x93\x48\x60\x4a\xde\x19\xbc\x88\x5d\xd0\xfd\x47\xa7\xda\xee\x78\xcb\x31\x89\x46\xfe\x20\x62\x9f\x34\x32\x8a\xdc\x90\x3e\x4f\xe9\xb2\x2f\x61\xd2\xc3\x47\x9c\x9c\x83\x7c\xde\x8f\xb7\xa9\x28\xd5\xb0\x76\x1e\x89\xca\xb8\x3c\x92\xec\x72\xb7\xa7\x28\x14\x9c\x5e\xb8\x7b\xa2\xcd\xf8\xf9\xbc\x39\x43\x9f\xd6\x78\xf6\x20\x2b\xc8\x56\xc3\xc7\xed\x8e\x1a\xa0\x7c\xd0\xd9\x1a\x94\xbb\x3e\x5a\x8e\x9b\xa7\xba\x97\xfc\x1b\x00\x00\xff\xff\x50\x28\x8f\x93\x96\x0b\x00\x00")

func installerStashAppscodeCom_stashperconaxtradbsYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashperconaxtradbsYaml,
		"installer.stash.appscode.com_stashperconaxtradbs.yaml",
	)
}

func installerStashAppscodeCom_stashperconaxtradbsYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashperconaxtradbsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashperconaxtradbs.yaml", size: 2966, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashperconaxtradbs.yaml": installerStashAppscodeCom_stashperconaxtradbsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashperconaxtradbs.yaml": &bintree{installerStashAppscodeCom_stashperconaxtradbsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
