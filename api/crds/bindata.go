// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// installer.stash.appscode.com_stashperconaxtradbs.v1.yaml
// installer.stash.appscode.com_stashperconaxtradbs.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _installerStashAppscodeCom_stashperconaxtradbsV1Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\x1b\x37\x10\xbd\xeb\x57\x0c\xd0\x43\x2e\xd5\x0a\x6e\x8a\xa2\xd8\x5b\xea\xf4\x10\xf4\x2b\xb0\x83\xa0\xd7\x11\x77\xb4\x9a\x9a\x4b\xb2\x33\x43\x35\xee\xaf\x2f\xc8\x5d\x59\xb2\xb4\x52\x1a\x17\xdd\x93\x39\x5f\x7c\x7c\x6f\x66\x2c\x4c\xfc\x91\x44\x39\x86\x16\x30\x31\x7d\x32\x0a\xe5\xa4\xcd\xc3\xf7\xda\x70\x5c\xed\x6e\x16\x0f\x1c\xba\x16\x6e\xb3\x5a\x1c\xee\x48\x63\x16\x47\x6f\x69\xc3\x81\x8d\x63\x58\x0c\x64\xd8\xa1\x61\xbb\x00\x70\x42\x58\x8c\x1f\x78\x20\x35\x1c\x52\x0b\x21\x7b\xbf\x00\xf0\xb8\x26\xaf\x25\x06\x00\x53\x6a\x41\x0d\x75\xbb\x00\x08\x38\xd0\x74\x4a\x24\x2e\x06\xfc\x64\x82\xdd\x5a\x1b\x0e\x6a\xe8\x3d\x49\x53\xbd\x0d\xa6\xa4\x2e\x76\xd4\xb8\x38\x2c\x34\x91\x2b\xd5\x7a\x89\x39\xb5\x70\x35\x76\xbc\x64\xba\xdc\xa1\x51\x1f\x85\xf7\xe7\xe5\x13\x92\xf2\xf7\x3e\xaf\x1e\xc7\x87\xdf\x17\xf7\xfb\x11\xda\xef\x26\xf8\xf6\x87\xea\xf4\xac\xf6\xd3\x85\x80\x9f\x59\xad\x06\x25\x9f\x05\xfd\xec\xf3\xaa\x5f\x39\xf4\xd9\xa3\xcc\x45\x2c\x00\xd4\xc5\x44\x2d\xfc\x5a\xd0\x27\x74\xd4\x2d\x00\x76\xa3\x5c\x15\xfd\x72\x62\x6f\x77\x83\x3e\x6d\xf1\x66\xac\xe9\xb6\x34\xe0\xf8\x38\x80\x98\x28\xbc\x79\xff\xee\xe3\xeb\xfb\x67\x66\x80\x24\x31\x91\xd8\x13\x0f\xe3\x77\xd4\x0f\x47\x56\x80\x8e\xd4\x09\x27\xab\x8d\xf2\xaa\x14\x1c\xa3\xa0\x2b\x8d\x40\x0a\xb6\xa5\x3d\x34\xea\x26\x0c\x10\x37\x60\x5b\x56\x10\x4a\x42\x4a\xc1\x6a\x73\x3c\x2b\x0c\x25\x08\x03\xc4\xf5\x1f\xe4\xac\x81\x7b\x92\x52\x06\x74\x1b\xb3\xef\xc0\xc5\xb0\x23\x31\x10\x72\xb1\x0f\xfc\xf7\x53\x6d\x05\x8b\xf5\x52\x8f\x46\x13\xdb\x87\x8f\x83\x91\x04\xf4\xb0\x43\x9f\xe9\x6b\xc0\xd0\xc1\x80\x8f\x20\x54\x6e\x81\x1c\x8e\xea\xd5\x10\x6d\xe0\x97\x28\x04\x1c\x36\xb1\x85\xad\x59\xd2\x76\xb5\xea\xd9\xf6\x73\xe0\xe2\x30\xe4\xc0\xf6\xb8\x72\x31\x98\xf0\x3a\x5b\x14\x5d\x75\xb4\x23\xbf\x52\xee\x97\x28\x6e\xcb\x46\xce\xb2\xd0\x0a\x13\x2f\x2b\xf4\x60\x75\x98\x86\xee\x2b\x99\x26\x47\x5f\x3d\xc3\x6a\x8f\xa9\xb6\xbf\x70\xe8\x8f\x1c\xb5\xf5\xae\x28\x50\x3a\x0f\x58\x01\xa7\xd4\xf1\x15\x07\xa2\x8b\xa9\xb0\x73\xf7\xe3\xfd\x07\xd8\x5f\x5d\xc5\x38\x65\xbf\xf2\x7e\x48\xd4\x83\x04\x85\x30\x0e\x1b\x92\x51\xc4\x8d\xc4\xa1\xd6\xa4\xd0\xa5\xc8\xc1\xea\xc1\x79\xa6\x70\x4a\xbf\xe6\xf5\xc0\x56\x74\xff\x33\x93\x5a\xd1\xaa\x81\x5b\x0c\x21\x1a\xac\x09\x72\xea\xd0\xa8\x6b\xe0\x5d\x80\x5b\x1c\xc8\xdf\xa2\xd2\xff\x2e\x40\x61\x5a\x97\x85\xd8\x7f\x27\xc1\xf1\x5e\x3b\x0d\x1e\x59\x3b\x72\xec\xd7\xd1\x05\xbd\xce\x57\xc4\x7d\x22\x57\x04\x2c\x1c\x4e\xd3\xb2\x89\x32\x06\xc2\x14\x09\x47\xeb\xe6\xf0\x8d\xfd\x0a\x1b\xf6\xf4\xcc\x33\x3f\xd0\xe5\x5b\xa3\x7b\xc8\xe9\xd4\x7a\x2d\xa3\x7c\x28\xfd\xac\xfd\x22\x61\x4f\x5c\x44\x87\x76\x47\x26\x8f\xf3\xe9\x9b\x28\x03\x5a\xd9\xd9\xf6\xfa\x9b\x2b\x17\x94\x21\xee\x49\xce\x22\x2e\x48\x50\x4b\x67\xef\xcb\x4a\xfc\x6d\x47\x22\xdc\xd1\x39\x80\x2b\xd8\x79\xc0\x7e\x26\xe3\x3a\x4b\x42\x3d\xeb\xc5\xa7\x7e\x86\x29\xa1\x14\x95\x2d\xbe\x30\xdd\xb0\x7f\x41\x5e\x19\x4a\x16\xea\xce\x53\x97\x4f\xaf\x99\x75\xed\xb1\xce\x38\x0d\xcf\xef\xb9\x22\xd3\x8b\x25\x12\x52\x8b\xf2\xc5\x22\xbd\xb8\x95\x0d\xa5\x27\x7b\x93\xd2\x1d\x25\xcf\x0e\x2f\x54\xf9\xaf\x1d\x7d\x4d\x92\x33\x08\x5f\x42\xf4\x5f\xc8\x56\x7e\x8b\xc5\x6c\xe7\xb5\x8f\x50\x7f\xf7\xed\x85\xaa\x73\x88\xe7\xd1\x2e\xa7\x35\x73\x62\xac\x43\x75\x62\x9b\x54\x3c\xb1\x1e\x61\xfd\xfc\xc6\x3d\x33\x6a\xf9\xa7\xd5\xb5\x60\x92\xc7\xc2\xe5\x8a\x32\xcf\xa3\xe5\x9f\x00\x00\x00\xff\xff\xf3\x88\x61\xd6\xe8\x0a\x00\x00")

func installerStashAppscodeCom_stashperconaxtradbsV1YamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashperconaxtradbsV1Yaml,
		"installer.stash.appscode.com_stashperconaxtradbs.v1.yaml",
	)
}

func installerStashAppscodeCom_stashperconaxtradbsV1Yaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashperconaxtradbsV1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashperconaxtradbs.v1.yaml", size: 2792, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _installerStashAppscodeCom_stashperconaxtradbsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\x1c\x35\x10\xfe\x7e\xbf\x62\x24\x90\x0a\x88\xbd\x23\x14\x55\xb0\x5f\x50\x49\x41\xaa\x28\x50\x25\xa5\x42\x8a\x8a\x34\x67\xcf\xed\x99\x78\x6d\x33\x33\x7b\x4d\xf2\xeb\x91\xbd\xbb\x97\x7b\xd9\x0b\x6d\x10\xfe\x74\x7e\x3c\x1e\x3f\xf3\xcc\xcb\x2d\x26\xf7\x96\x58\x5c\x0c\x35\x60\x72\x74\xa3\x14\xf2\x4e\xe6\xd7\xdf\xca\xdc\xc5\xc5\xe6\x6c\x49\x8a\x67\xb3\x6b\x17\x6c\x0d\xe7\x9d\x68\x6c\x2f\x48\x62\xc7\x86\x5e\xd0\xca\x05\xa7\x2e\x86\x59\x4b\x8a\x16\x15\xeb\x19\x80\x61\xc2\x0c\xbe\x71\x2d\x89\x62\x9b\x6a\x08\x9d\xf7\x33\x00\x8f\x4b\xf2\x92\x6d\x00\x30\xa5\x1a\x44\x51\xd6\x33\x80\x80\x2d\x0d\xbb\x44\x6c\x62\xc0\x1b\x65\xb4\x4b\x99\xbb\x20\x8a\xde\x13\xcf\xcb\xe9\x1c\x53\x12\x13\x2d\xcd\x4d\x6c\x67\x92\xc8\x64\x6f\x0d\xc7\x2e\xd5\xf0\xa0\x6d\xff\xc8\xf0\xb8\x41\xa5\x26\xb2\x1b\xf7\xd5\x96\x49\xfe\x3d\xde\x2b\xdb\x3e\xf0\xcb\x7c\xfc\xba\xa7\xf6\x87\x32\xbe\xf8\xa1\x1c\x7a\x27\xfa\xf3\x09\x83\x57\x4e\xb4\x18\x25\xdf\x31\xfa\xc9\xf0\xca\xb9\xb8\xd0\x74\x1e\x79\xca\x62\x06\x90\x98\x84\x78\x43\xbf\x87\xeb\x10\xdf\x87\x9f\x1c\x79\x2b\x35\xac\xd0\x4b\x66\x28\x26\x26\xaa\xe1\xd7\x1c\x5c\x42\x43\x76\x06\xb0\x41\xef\x6c\xc9\x41\x1f\x5e\x4c\x14\x9e\xbf\x7e\xf9\xf6\xe9\xa5\x59\x53\x8b\x3d\x98\x3d\xc7\x44\xac\x5b\x15\xfa\xb4\x6c\x0b\x62\x8b\x01\x58\x12\xc3\x2e\x15\x8f\xf0\x24\xbb\xea\x6d\xc0\xe6\x12\x20\x01\x5d\x13\x6c\x7a\x8c\x2c\x48\x79\x06\xe2\x0a\x74\xed\x04\x98\x4a\x0c\x41\x0b\xa5\x1d\xb7\x90\x4d\x30\x40\x5c\xfe\x45\x46\xe7\x70\x99\xe3\x64\x01\x59\xc7\xce\x5b\x30\x31\x6c\x88\x15\x98\x4c\x6c\x82\xbb\xdb\x7a\x16\xd0\x58\x9e\xf4\xa8\x34\xa8\x3c\x2e\x17\x94\x38\xa0\xcf\x22\x74\xf4\x25\x60\xb0\xd0\xe2\x2d\x30\xe5\x37\xa0\x0b\x3b\xde\x8a\x89\xcc\xe1\x97\xc8\x04\x2e\xac\x62\x0d\x6b\xd5\x24\xf5\x62\xd1\x38\x1d\x5b\xc0\xc4\xb6\xed\x82\xd3\xdb\x85\x89\x41\xd9\x2d\x3b\x8d\x2c\x0b\x4b\x1b\xf2\x0b\x71\x4d\x85\x6c\xd6\x4e\xc9\x68\xc7\xb4\xc0\xe4\xaa\x42\x3c\x68\xe9\xa3\xd6\x7e\xc2\x43\xbf\xc8\x93\x1d\xa6\x7a\x9b\x4a\xc9\xb3\x0b\xcd\x16\x2e\xc5\x76\x52\xf7\x5c\x69\xe0\x04\x70\xb8\xd6\xf3\xbf\x97\x37\x43\x59\x95\x8b\x1f\x2f\xdf\xc0\xf8\x68\x49\xc1\xbe\xe6\x45\xed\xfb\x6b\x72\x2f\x7c\x16\xca\x85\x15\x71\x9f\xb8\x15\xc7\xb6\x78\xa4\x60\x53\x74\x41\xcb\xc6\x78\x47\x61\x5f\x74\xe9\x96\xad\xd3\x9c\xe9\xbf\x3b\x12\xcd\xf9\x99\xc3\x39\x86\x10\x15\x96\x04\x5d\xb2\xa8\x64\xe7\xf0\x32\xc0\x39\xb6\xe4\xcf\x51\xe8\x7f\x97\x3d\x2b\x2c\x55\x96\xf4\xdf\x85\xdf\x9d\x5f\xe3\x9a\x6a\x8f\xbc\xca\xb0\xda\x43\x00\x5a\xbc\x79\x45\xa1\xd1\x75\x0d\xcf\x9e\x1e\x9c\x25\xd4\x5c\x92\x35\xfc\x79\x85\xd5\xdd\xbb\xcf\xae\x2a\xac\xee\xbe\xaa\xbe\x7b\xf7\xc5\xd5\xf0\xe3\xf3\xef\x3f\x3d\xb8\x33\x49\x72\x84\xfb\x04\x6e\xe1\x71\x0a\x4e\x16\xcd\xf1\x5c\xba\x4c\x64\x72\x15\xe5\x54\x0e\x8d\xba\x8a\xdc\x1b\xc2\x60\x09\x3b\x33\x6e\x5c\x7d\xb3\xc0\xca\x79\xfa\x00\x91\x96\x68\xae\xbb\x74\x28\xd3\x29\xeb\xbc\x90\x9b\x09\xf4\xa4\x14\x43\xec\xd1\xa0\x5e\x90\xf2\xed\xd4\xd5\x55\xe4\x16\x35\xff\x31\xe8\xd3\xaf\x4f\xba\xce\x13\xa3\x21\x9e\xcc\xc0\x81\xd4\xc5\x69\xe7\x7d\x2e\x81\xdf\x36\xc4\xec\xec\x51\x29\x9c\xe4\xeb\x5a\x6c\x8e\xac\x1f\x52\x84\xa9\x71\x72\x22\xb4\x07\x55\x61\x4a\x51\x9c\xc6\x47\x5c\x55\x6c\x3e\xf2\x4e\xee\x79\xc7\x64\x0f\xaf\x55\x5b\xfe\x13\x07\x23\xbf\xa3\x23\xc5\x43\xff\x27\x13\xf1\xa8\x24\x30\x89\x46\xfe\xa8\x34\x3c\xaa\x30\x15\xb9\x21\x7d\x9e\xd2\x05\x25\xef\x0c\x4e\x7a\xf8\x2f\xf5\x79\x5a\xf6\xa3\xa7\x3f\x54\xd0\xf7\xe8\x34\x7f\xb4\xc5\x4e\x0f\xbd\xee\x30\x7d\xf6\xcd\xa4\xbf\x63\x96\x53\x0c\xab\x61\x30\xec\x41\xa5\x31\xf6\x90\x21\x4b\x7b\xd8\x0e\xbb\x87\x27\xe2\x01\xb4\x19\xbf\x6f\x37\x67\xe8\xd3\x1a\xcf\xee\xb1\x92\x94\x6a\xf8\xfa\xdc\x39\x06\x28\x5f\x5c\xb6\x06\xe5\xae\x67\x91\xf9\xe4\xf6\xed\x91\x7f\x02\x00\x00\xff\xff\x9a\x00\xef\x3a\x37\x0b\x00\x00")

func installerStashAppscodeCom_stashperconaxtradbsYamlBytes() ([]byte, error) {
	return bindataRead(
		_installerStashAppscodeCom_stashperconaxtradbsYaml,
		"installer.stash.appscode.com_stashperconaxtradbs.yaml",
	)
}

func installerStashAppscodeCom_stashperconaxtradbsYaml() (*asset, error) {
	bytes, err := installerStashAppscodeCom_stashperconaxtradbsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "installer.stash.appscode.com_stashperconaxtradbs.yaml", size: 2871, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"installer.stash.appscode.com_stashperconaxtradbs.v1.yaml": installerStashAppscodeCom_stashperconaxtradbsV1Yaml,
	"installer.stash.appscode.com_stashperconaxtradbs.yaml":    installerStashAppscodeCom_stashperconaxtradbsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"installer.stash.appscode.com_stashperconaxtradbs.v1.yaml": {installerStashAppscodeCom_stashperconaxtradbsV1Yaml, map[string]*bintree{}},
	"installer.stash.appscode.com_stashperconaxtradbs.yaml":    {installerStashAppscodeCom_stashperconaxtradbsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
